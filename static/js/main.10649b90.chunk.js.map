{"version":3,"sources":["components/HexagonGrid.tsx","components/HexagonGridEnv.tsx","App.tsx","index.tsx"],"names":["HexagonGrid","props","gridRadius","tileSpacing","tileWidth","position","result","tileSize","Math","sqrt","startingTilePos","currentRowTileCount","i","offset","j","push","receiveShadow","args","attach","color","generateHexagonGrid","HexagonGridEnv","useControls","value","min","max","step","style","height","camera","zoom","fallback","Environment","preset","OrbitControls","enablePan","rotation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAgFeA,EA/DkC,SAACC,GAAW,IAAD,EAmD1D,OACE,mCAnD0B,SAAC,GAmB3B,IAdiC,IAJjCC,EAIgC,EAJhCA,WACAC,EAGgC,EAHhCA,YACAC,EAEgC,EAFhCA,UACAC,EACgC,EADhCA,SAEIC,EAAsB,GAEpBC,EAAYH,EAAYI,KAAKC,KAAK,GAAM,EAExCC,GAEAR,GAAcK,EAAWJ,GAAgB,GAC1CI,EAAWJ,GAAe,EAHzBO,IAKAR,EAAa,IACF,IAAZE,EAAmBD,EAAcK,KAAKC,KAAK,GAAM,GAElDE,EAAsBT,EAAa,EAC9BU,EAAI,EAAGA,EAAiB,EAAbV,EAAiB,EAAGU,IAAK,CACvCA,EAAIV,EACNS,KACSC,EAAIV,GAAcU,IAAMV,IACjCS,IAIF,IAFA,IAAME,GACFF,EAAsBT,IAAeK,EAAWJ,GAAgB,EAC3DW,EAAI,EAAGA,EAAIH,EAAqBG,IACvCR,EAAOS,KACL,uBACEV,SAAU,CACRK,GACGH,EAAWJ,GAAeW,EAC3BD,EACAR,EAAS,GACXA,EAAS,GACTK,GACKH,EAAWJ,GAAeK,KAAKC,KAAK,GAAM,EAAKG,EAClDP,EAAS,IAEbW,eAAa,EAXf,UAaE,wCAAwBC,KAAM,CAACb,EAAWA,EAAW,EAAG,KACxD,sCAAsBc,OAAO,WAAWC,MAAO,aAKvD,OAAOb,EAIJc,CAAoB,CACnBlB,WAAYD,EAAMC,WAClBC,YAAaF,EAAME,YACnBC,UAAWH,EAAMG,UACjBC,SAAQ,UAAEJ,EAAMI,gBAAR,QAAoB,CAAC,EAAG,EAAG,QCpC5BgB,EAhCkB,WAC/B,MAA+CC,YAAY,CACzDpB,WAAY,CAAEqB,MAAO,EAAGC,IAAK,EAAGC,IAAK,GAAIC,KAAM,GAC/CvB,YAAa,CAAEoB,MAAO,EAAGC,IAAK,EAAGC,IAAK,GAAIC,KAAM,GAChDtB,UAAW,CAAEmB,MAAO,EAAGC,IAAK,EAAGC,IAAK,GAAIC,KAAM,KAHxCxB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,UAMjC,OACE,8BACE,eAAC,IAAD,CACEuB,MAAO,CAAEC,OAAQ,SACjBC,OAAQ,CAAExB,SAAU,CAAC,EAAG,GAAI,GAAIyB,KAAM,GAFxC,UAIE,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAAC,EAAD,CACE7B,WAAYA,EACZC,YAAaA,EACbC,UAAWA,IAEb,cAAC4B,EAAA,EAAD,CAAaC,OAAQ,cAEvB,cAACC,EAAA,EAAD,CAAeC,WAAW,IAC1B,4BACElB,KAAM,CAAC,IAAK,GAAI,UAAW,WAC3BZ,SAAU,CAAC,GAAI,EAAG,GAClB+B,SAAU,CAAC,EAAG,EAAG,WCvBZC,MAJf,WACE,OAAO,cAAC,EAAD,KCATC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.10649b90.chunk.js","sourcesContent":["import \"@react-three/fiber\";\r\nimport React, { ReactNode } from \"react\";\r\n\r\nexport interface HexgagonGridProps {\r\n  position?: [number, number, number];\r\n  gridRadius: number;\r\n  tileSpacing: number;\r\n  tileWidth: number;\r\n}\r\n\r\ninterface IGenerateHexagonGridParams {\r\n  gridRadius: number;\r\n  tileSpacing: number;\r\n  tileWidth: number;\r\n  position: [number, number, number];\r\n}\r\n\r\nconst HexagonGrid: React.FC<HexgagonGridProps> = (props) => {\r\n  const generateHexagonGrid = ({\r\n    gridRadius,\r\n    tileSpacing,\r\n    tileWidth,\r\n    position,\r\n  }: IGenerateHexagonGridParams) => {\r\n    let result: ReactNode[] = [];\r\n\r\n    const tileSize = (tileWidth / Math.sqrt(3)) * 3;\r\n\r\n    const startingTilePos: { x: number; z: number } = {\r\n      x:\r\n        (-gridRadius * (tileSize + tileSpacing)) / 2 +\r\n        (tileSize + tileSpacing) / 2,\r\n      z:\r\n        -(gridRadius - 1) *\r\n        (tileWidth * 1.5 + (tileSpacing * Math.sqrt(3)) / 2),\r\n    };\r\n    let currentRowTileCount = gridRadius - 1;\r\n    for (let i = 0; i < gridRadius * 2 - 1; i++) {\r\n      if (i < gridRadius) {\r\n        currentRowTileCount++;\r\n      } else if (i > gridRadius || i === gridRadius) {\r\n        currentRowTileCount--;\r\n      }\r\n      const offset =\r\n        ((currentRowTileCount - gridRadius) * (tileSize + tileSpacing)) / 2;\r\n      for (let j = 0; j < currentRowTileCount; j++) {\r\n        result.push(\r\n          <mesh\r\n            position={[\r\n              startingTilePos.x +\r\n                (tileSize + tileSpacing) * j -\r\n                offset +\r\n                position[0],\r\n              position[1],\r\n              startingTilePos.z +\r\n                (((tileSize + tileSpacing) * Math.sqrt(3)) / 2) * i +\r\n                position[2],\r\n            ]}\r\n            receiveShadow\r\n          >\r\n            <cylinderBufferGeometry args={[tileWidth, tileWidth, 6, 6]} />\r\n            <meshStandardMaterial attach=\"material\" color={\"#fff\"} />\r\n          </mesh>\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n  return (\r\n    <>\r\n      {generateHexagonGrid({\r\n        gridRadius: props.gridRadius,\r\n        tileSpacing: props.tileSpacing,\r\n        tileWidth: props.tileWidth,\r\n        position: props.position ?? [0, 0, 0],\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HexagonGrid;\r\n","import { Environment, OrbitControls } from \"@react-three/drei\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { useControls } from \"leva\";\r\nimport React, { Suspense } from \"react\";\r\nimport HexagonGrid from \"./HexagonGrid\";\r\n\r\nconst HexagonGridEnv: React.FC = () => {\r\n  const { gridRadius, tileSpacing, tileWidth } = useControls({\r\n    gridRadius: { value: 4, min: 1, max: 10, step: 1 },\r\n    tileSpacing: { value: 2, min: 0, max: 10, step: 1 },\r\n    tileWidth: { value: 4, min: 1, max: 10, step: 1 },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Canvas\r\n        style={{ height: \"100vh\" }}\r\n        camera={{ position: [0, 80, 0], zoom: 1 }}\r\n      >\r\n        <Suspense fallback={null}>\r\n          <HexagonGrid\r\n            gridRadius={gridRadius}\r\n            tileSpacing={tileSpacing}\r\n            tileWidth={tileWidth}\r\n          />\r\n          <Environment preset={\"forest\"} />\r\n        </Suspense>\r\n        <OrbitControls enablePan={false} />\r\n        <gridHelper\r\n          args={[200, 40, \"#101010\", \"#050505\"]}\r\n          position={[0, -3, 0]}\r\n          rotation={[0, 0, 0]}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HexagonGridEnv;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport HexagonGridEnv from \"./components/HexagonGridEnv\";\n\nfunction App() {\n  return <HexagonGridEnv />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}