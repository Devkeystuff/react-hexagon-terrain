{"version":3,"sources":["components/HexagonGrid.tsx","styles/Input.styled.ts","components/HexagonGridEnv.tsx","App.tsx","index.tsx"],"names":["HexagonGrid","props","gridRadius","tileSpacing","tileWidth","position","result","tileSize","Math","sqrt","startingTilePos","currentRowTileCount","i","offset","j","push","receiveShadow","args","attach","color","generateHexagonGrid","StyledInput","styled","input","StyledInputContainer","div","HexagonGridEnv","useState","hexagonGridProps","setHexagonGridProps","handleChange","newValue","prevState","value","type","min","step","max","onChange","e","parseInt","target","style","height","camera","zoom","fallback","Environment","preset","OrbitControls","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAiFeA,EA/DkC,SAACC,GAmDhD,OACE,mCAnD0B,SAAC,GAmB3B,IAdiC,IAJjCC,EAIgC,EAJhCA,WACAC,EAGgC,EAHhCA,YACAC,EAEgC,EAFhCA,UACAC,EACgC,EADhCA,SAEIC,EAAsB,GAEpBC,EAAYH,EAAYI,KAAKC,KAAK,GAAM,EAExCC,GAEAR,GAAcK,EAAWJ,GAAgB,GAC1CI,EAAWJ,GAAe,EAHzBO,IAKAR,EAAa,IACF,IAAZE,EAAmBD,EAAcK,KAAKC,KAAK,GAAM,GAElDE,EAAsBT,EAAa,EAC9BU,EAAI,EAAGA,EAAiB,EAAbV,EAAiB,EAAGU,IAAK,CACvCA,EAAIV,EACNS,KACSC,EAAIV,GAAcU,IAAMV,IACjCS,IAIF,IAFA,IAAME,GACFF,EAAsBT,IAAeK,EAAWJ,GAAgB,EAC3DW,EAAI,EAAGA,EAAIH,EAAqBG,IACvCR,EAAOS,KACL,uBACEV,SAAU,CACRK,GACGH,EAAWJ,GAAeW,EAC3BD,EACAR,EAAS,GACXA,EAAS,GACTK,GACKH,EAAWJ,GAAeK,KAAKC,KAAK,GAAM,EAAKG,EAClDP,EAAS,IAEbW,eAAa,EAXf,UAaE,wCAAwBC,KAAM,CAACb,EAAWA,EAAW,EAAG,KACxD,sCAAsBc,OAAO,WAAWC,MAAO,aAKvD,OAAOb,EAIJc,CAAoB,CACnBlB,WAAYD,EAAMC,WAClBC,YAAaF,EAAME,YACnBC,UAAWH,EAAMG,UACjBC,SAAUJ,EAAMI,c,QCzEXgB,EAAcC,IAAOC,MAAV,+4CCKlBC,EAAuBF,IAAOG,IAAV,uVA+FXC,EA7EkB,WAC/B,MAAgDC,mBAA4B,CAC1EzB,WAAY,EACZG,SAAU,CAAC,EAAG,EAAG,GACjBF,YAAa,EACbC,UAAW,IAJb,mBAAOwB,EAAP,KAAyBC,EAAzB,KAOMC,EAAe,SAACC,GACpBF,GAAoB,SAACG,GAAD,mBAAC,eAAoBA,GAAcD,OAGzD,OACE,gCACE,eAACP,EAAD,WACE,wCACA,cAACH,EAAD,CACEY,MAAOL,EAAiB1B,WACxBgC,KAAM,QACNC,IAAK,EACLC,KAAM,EACNC,IAAK,GACLC,SAAU,SAACC,GAAD,OACRT,EAAa,2BACRF,GADO,IAEV1B,WAAYsC,SAASD,EAAEE,OAAOR,aAIpC,4CACA,cAACZ,EAAD,CACEY,MAAOL,EAAiBxB,UACxB8B,KAAM,QACNC,IAAK,EACLC,KAAM,EACNC,IAAK,GACLC,SAAU,SAACC,GAAD,OACRT,EAAa,2BACRF,GADO,IAEVxB,UAAWoC,SAASD,EAAEE,OAAOR,aAInC,8CACA,cAACZ,EAAD,CACEY,MAAOL,EAAiBzB,YACxB+B,KAAM,QACNC,IAAK,EACLC,KAAM,EACNC,IAAK,GACLC,SAAU,SAACC,GAAD,OACRT,EAAa,2BACRF,GADO,IAEVzB,YAAaqC,SAASD,EAAEE,OAAOR,gBAKvC,eAAC,IAAD,CACES,MAAO,CAAEC,OAAQ,SACjBC,OAAQ,CAAEvC,SAAU,CAAC,EAAG,GAAI,GAAIwC,KAAM,GAFxC,UAIE,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAAC,EAAD,CACE5C,WAAY0B,EAAiB1B,WAC7BG,SAAUuB,EAAiBvB,SAC3BF,YAAayB,EAAiBzB,YAC9BC,UAAWwB,EAAiBxB,YAE9B,cAAC2C,EAAA,EAAD,CAAaC,OAAQ,cAEvB,cAACC,EAAA,EAAD,WCxFOC,MAJf,WACE,OAAO,cAAC,EAAD,KCATC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.29848cc0.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\r\nimport {} from \"@react-three/drei\";\r\nimport \"@react-three/fiber\";\r\n\r\nexport interface HexgagonGridProps {\r\n  position: [number, number, number];\r\n  gridRadius: number;\r\n  tileSpacing: number;\r\n  tileWidth: number;\r\n}\r\n\r\ninterface IGenerateHexagonGridParams {\r\n  gridRadius: number;\r\n  tileSpacing: number;\r\n  tileWidth: number;\r\n  position: [number, number, number];\r\n}\r\n\r\nconst HexagonGrid: React.FC<HexgagonGridProps> = (props) => {\r\n  const generateHexagonGrid = ({\r\n    gridRadius,\r\n    tileSpacing,\r\n    tileWidth,\r\n    position,\r\n  }: IGenerateHexagonGridParams) => {\r\n    let result: ReactNode[] = [];\r\n\r\n    const tileSize = (tileWidth / Math.sqrt(3)) * 3;\r\n\r\n    const startingTilePos: { x: number; z: number } = {\r\n      x:\r\n        (-gridRadius * (tileSize + tileSpacing)) / 2 +\r\n        (tileSize + tileSpacing) / 2,\r\n      z:\r\n        -(gridRadius - 1) *\r\n        (tileWidth * 1.5 + (tileSpacing * Math.sqrt(3)) / 2),\r\n    };\r\n    let currentRowTileCount = gridRadius - 1;\r\n    for (let i = 0; i < gridRadius * 2 - 1; i++) {\r\n      if (i < gridRadius) {\r\n        currentRowTileCount++;\r\n      } else if (i > gridRadius || i === gridRadius) {\r\n        currentRowTileCount--;\r\n      }\r\n      const offset =\r\n        ((currentRowTileCount - gridRadius) * (tileSize + tileSpacing)) / 2;\r\n      for (let j = 0; j < currentRowTileCount; j++) {\r\n        result.push(\r\n          <mesh\r\n            position={[\r\n              startingTilePos.x +\r\n                (tileSize + tileSpacing) * j -\r\n                offset +\r\n                position[0],\r\n              position[1],\r\n              startingTilePos.z +\r\n                (((tileSize + tileSpacing) * Math.sqrt(3)) / 2) * i +\r\n                position[2],\r\n            ]}\r\n            receiveShadow\r\n          >\r\n            <cylinderBufferGeometry args={[tileWidth, tileWidth, 6, 6]} />\r\n            <meshStandardMaterial attach=\"material\" color={\"#fff\"} />\r\n          </mesh>\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n  return (\r\n    <>\r\n      {generateHexagonGrid({\r\n        gridRadius: props.gridRadius,\r\n        tileSpacing: props.tileSpacing,\r\n        tileWidth: props.tileWidth,\r\n        position: props.position,\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HexagonGrid;\r\n","import styled from \"styled-components\"\r\n\r\nexport const StyledInput = styled.input`\r\n    color: white;\r\n    position: relative;\r\n    margin: 10px 0;\r\n    width: 200px;\r\n\r\n    appearance: none;\r\n    --moz-appearance: none;\r\n    -ms-appearance: none;\r\n    -webkit-appearance: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    &[type=\"range\"]::before, &[type=\"range\"]::after {\r\n        position: absolute;\r\n        display: inline-block;\r\n        top: -6px;\r\n    }\r\n\r\n    &[type=\"range\"]::before {\r\n        content: attr(min);\r\n        left: 0;\r\n        transform: translateX(calc(-100% - 10px));\r\n    }\r\n    &[type=\"range\"]::after {\r\n        content: attr(max);\r\n        right: 0;\r\n        transform: translateX(calc(100% + 10px));\r\n    }\r\n\r\n    /* &[type=\"range\"]::-moz-range-track {}\r\n    &[type=\"range\"]::-ms-track {} */\r\n    &[type=\"range\"]::-webkit-slider-runnable-track {\r\n        appearance: none;\r\n        --moz-appearance: none;\r\n        -ms-appearance: none;\r\n        -webkit-appearance: none;\r\n        background-color: rgb(50, 50, 50);\r\n        height: 5px;\r\n    }\r\n\r\n    /* &[type=\"range\"]::-moz-range-thumb {}\r\n    &[type=\"range\"]::-ms-thumb {} */\r\n    &[type=\"range\"]::-webkit-slider-thumb {\r\n        appearance: none;\r\n        --moz-appearance: none;\r\n        -ms-appearance: none;\r\n        -webkit-appearance: none;\r\n        background-color:#36D2EF;\r\n        width: 20px;\r\n        height: 20px;\r\n        border-radius: 50%;\r\n        margin-top: -7px;\r\n    }\r\n`","import React, { Suspense, useState } from \"react\";\r\nimport { Environment, OrbitControls } from \"@react-three/drei\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport HexagonGrid, { HexgagonGridProps } from \"./HexagonGrid\";\r\nimport { StyledInput } from \"../styles/Input.styled\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledInputContainer = styled.div`\r\n  position: absolute;\r\n  padding: 50px;\r\n  width: 400px;\r\n  margin: 10px;\r\n  background-color: rgba(24, 24, 24, 0.5);\r\n  backdrop-filter: blur(4px);\r\n  border-radius: 5px;\r\n  border: 1px solid rgb(50, 50, 50);\r\n  z-index: 10;\r\n\r\n  h3 {\r\n    color: white;\r\n    font-size: 12px;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nconst HexagonGridEnv: React.FC = () => {\r\n  const [hexagonGridProps, setHexagonGridProps] = useState<HexgagonGridProps>({\r\n    gridRadius: 4,\r\n    position: [0, 0, 0],\r\n    tileSpacing: 2,\r\n    tileWidth: 4,\r\n  });\r\n\r\n  const handleChange = (newValue: HexgagonGridProps) => {\r\n    setHexagonGridProps((prevState) => ({ ...prevState, ...newValue }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StyledInputContainer>\r\n        <h3>Radius</h3>\r\n        <StyledInput\r\n          value={hexagonGridProps.gridRadius}\r\n          type={\"range\"}\r\n          min={1}\r\n          step={1}\r\n          max={10}\r\n          onChange={(e) =>\r\n            handleChange({\r\n              ...hexagonGridProps,\r\n              gridRadius: parseInt(e.target.value),\r\n            })\r\n          }\r\n        />\r\n        <h3>Tile width</h3>\r\n        <StyledInput\r\n          value={hexagonGridProps.tileWidth}\r\n          type={\"range\"}\r\n          min={1}\r\n          step={1}\r\n          max={10}\r\n          onChange={(e) =>\r\n            handleChange({\r\n              ...hexagonGridProps,\r\n              tileWidth: parseInt(e.target.value),\r\n            })\r\n          }\r\n        />\r\n        <h3>Tile spacing</h3>\r\n        <StyledInput\r\n          value={hexagonGridProps.tileSpacing}\r\n          type={\"range\"}\r\n          min={0}\r\n          step={1}\r\n          max={10}\r\n          onChange={(e) =>\r\n            handleChange({\r\n              ...hexagonGridProps,\r\n              tileSpacing: parseInt(e.target.value),\r\n            })\r\n          }\r\n        />\r\n      </StyledInputContainer>\r\n      <Canvas\r\n        style={{ height: \"100vh\" }}\r\n        camera={{ position: [0, 80, 0], zoom: 1 }}\r\n      >\r\n        <Suspense fallback={null}>\r\n          <HexagonGrid\r\n            gridRadius={hexagonGridProps.gridRadius}\r\n            position={hexagonGridProps.position}\r\n            tileSpacing={hexagonGridProps.tileSpacing}\r\n            tileWidth={hexagonGridProps.tileWidth}\r\n          />\r\n          <Environment preset={\"forest\"} />\r\n        </Suspense>\r\n        <OrbitControls />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HexagonGridEnv;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport HexagonGridEnv from \"./components/HexagonGridEnv\";\n\nfunction App() {\n  return <HexagonGridEnv />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}