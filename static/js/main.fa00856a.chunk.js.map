{"version":3,"sources":["components/HexagonGrid.tsx","components/HexagonGridEnv.tsx","App.tsx","index.tsx"],"names":["HexagonGrid","props","gridRadius","tileSpacing","tileWidth","y","result","tileSize","Math","sqrt","startingTilePos","currentRowTileCount","i","offset","j","push","position","receiveShadow","args","attach","color","generateHexagonGrid","HexagonGridEnv","style","height","camera","zoom","fallback","Environment","preset","OrbitControls","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAoEeA,EArDe,SAACC,GAyC7B,OACE,mCAzC0B,SAAC,GAa3B,IARiC,IAJjCC,EAIgC,EAJhCA,WACAC,EAGgC,EAHhCA,YACAC,EAEgC,EAFhCA,UACAC,EACgC,EADhCA,EAEIC,EAAsB,GACpBC,EAAWH,EAAYI,KAAKC,KAAK,GACjCC,GACCR,GAAcK,EAAWJ,GAAgBK,KAAKC,KAAK,GADpDC,GAEER,GAAcK,EAAWJ,GAAgBK,KAAKC,KAAK,GAAM,IAE7DE,EAAsBT,EAAa,EAC9BU,EAAI,EAAGA,EAAiB,EAAbV,EAAiB,EAAGU,IAAK,CACvCA,EAAIV,EACNS,KACSC,EAAIV,GAAcU,IAAMV,IACjCS,IAIF,IAFA,IAAME,GACFF,EAAsBT,IAAeK,EAAWJ,GAAgB,EAC3DW,EAAI,EAAGA,EAAIH,EAAqBG,IACvCR,EAAOS,KACL,uBACEC,SAAU,CACRN,GAAqBH,EAAWJ,GAAeW,EAAID,EACnDR,EACAK,GACIH,EAAWJ,GAAeK,KAAKC,KAAK,GAAM,IAAMG,GAEtDK,eAAa,EAPf,UASE,wCAAwBC,KAAM,CAACd,EAAWA,EAAW,EAAG,KACxD,sCAAsBe,OAAO,WAAWC,MAAO,aAKvD,OAAOd,EAIJe,CAAoB,CACnBnB,WAAY,GACZC,YAAa,EACbC,UAAW,EACXC,EAAG,OC1CIiB,EAfkB,WAC/B,OACE,eAAC,IAAD,CACEC,MAAO,CAAEC,OAAQ,SACjBC,OAAQ,CAAET,SAAU,CAAC,EAAG,GAAI,GAAIU,KAAM,GAFxC,UAIE,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,CAAaC,OAAQ,cAEvB,cAACC,EAAA,EAAD,QCPSC,MAJf,WACE,OAAO,cAAC,EAAD,KCATC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fa00856a.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\nimport {} from \"@react-three/drei\";\nimport \"@react-three/fiber\";\n\ninterface IHexagonGridProps {\n  maxHeight: number;\n}\n\ninterface IGenerateHexagonGridParams {\n  gridRadius: number;\n  tileSpacing: number;\n  tileWidth: number;\n  y: number;\n}\n\nconst HexagonGrid: React.FC = (props) => {\n  const generateHexagonGrid = ({\n    gridRadius,\n    tileSpacing,\n    tileWidth,\n    y,\n  }: IGenerateHexagonGridParams) => {\n    let result: ReactNode[] = [];\n    const tileSize = tileWidth * Math.sqrt(3);\n    const startingTilePos: { x: number; z: number } = {\n      x: (-gridRadius * (tileSize + tileSpacing)) / Math.sqrt(3),\n      z: ((-gridRadius * (tileSize + tileSpacing)) / Math.sqrt(3)) * 1.2,\n    };\n    let currentRowTileCount = gridRadius - 1;\n    for (let i = 0; i < gridRadius * 2 - 1; i++) {\n      if (i < gridRadius) {\n        currentRowTileCount++;\n      } else if (i > gridRadius || i === gridRadius) {\n        currentRowTileCount--;\n      }\n      const offset =\n        ((currentRowTileCount - gridRadius) * (tileSize + tileSpacing)) / 2;\n      for (let j = 0; j < currentRowTileCount; j++) {\n        result.push(\n          <mesh\n            position={[\n              startingTilePos.x + (tileSize + tileSpacing) * j - offset,\n              y,\n              startingTilePos.z +\n                ((tileSize + tileSpacing) / Math.sqrt(3)) * 1.5 * i,\n            ]}\n            receiveShadow\n          >\n            <cylinderBufferGeometry args={[tileWidth, tileWidth, 6, 6]} />\n            <meshStandardMaterial attach=\"material\" color={\"#fff\"} />\n          </mesh>\n        );\n      }\n    }\n    return result;\n  };\n  return (\n    <>\n      {generateHexagonGrid({\n        gridRadius: 10,\n        tileSpacing: 0,\n        tileWidth: 4,\n        y: 0,\n      })}\n    </>\n  );\n};\n\nexport default HexagonGrid;\n","import React, { Suspense } from \"react\";\nimport { Environment, OrbitControls } from \"@react-three/drei\";\nimport { Canvas } from \"@react-three/fiber\";\nimport HexagonGrid from \"./HexagonGrid\";\n\nconst HexagonGridEnv: React.FC = () => {\n  return (\n    <Canvas\n      style={{ height: \"100vh\" }}\n      camera={{ position: [0, 80, 0], zoom: 1 }}\n    >\n      <Suspense fallback={null}>\n        <HexagonGrid />\n        <Environment preset={\"sunset\"} />\n      </Suspense>\n      <OrbitControls />\n    </Canvas>\n  );\n};\n\nexport default HexagonGridEnv;\n","import React from \"react\";\nimport \"./App.css\";\nimport HexagonGridEnv from \"./components/HexagonGridEnv\";\n\nfunction App() {\n  return <HexagonGridEnv />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}